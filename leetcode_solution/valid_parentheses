
Question: Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Code cpp:

#include <stack>
class solution{
public:
	bool isValid(string s){
		if(s.empty()) return true;
		stack<char> stack;
		for(char c: s){
			if(c=='{'||c=='['||c=='('){
				stack.push();
			}else if(c=='}'||c==']'||c==')'){
				if(stack.empty()) return false;
				char top = stack.top();
				if((c==')' && top!= '(') || (c==']' && top!='[') || (c=='}' && top!='{')){
					return false;
				}
				stack.pop();
			}
		}
		return stack.empty();
	}
}


Python:

class Solution(object)
	def isValid(self, s):
		stack = []
		for c in s:
			if c in '([{':
				stack.append(c)
			else:
				if not stack or (c==')' and stack[-1]!='(') or (c==']' and stack[-1]!='[') or (c=='}' and stack[-1]!='{')
					return false
				stack.pop()
		return not stack
